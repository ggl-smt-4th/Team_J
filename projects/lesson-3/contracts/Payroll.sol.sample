pragma solidity ^0.4.14;
import './SafeMath.sol';
import './Ownable.sol';
contract Payroll is Ownable{
    
    
    struct Employee {
        // TODO: your code here
        address id;
        uint salary;
        uint lastPayday;
    }
    using SafeMath for uint;
    uint totalSalary = 0;
    uint index;
    uint constant payDuration = 30 seconds;
    address owner;
    mapping(address => Employee) public employeeMap;

    function _partialPaid(Employee employee) private {
        uint payment = (employee.salary.mul(now.sub(employee.lastPayday))).div(payDuration);
        employee.id.transfer(payment);
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    
    modifier employeeExist(address employeeId) {
        assert(employeeMap[employeeId].id != 0x0);
        _;
    }

    function Payroll() payable public {
        owner = msg.sender;
    }

    function addEmployee(address employeeId, uint salary) payable public onlyOwner{
        
        employeeMap[employeeId] = Employee(employeeId, salary * 1 ether, now);
        totalSalary += salary;
    }
    

    function removeEmployee(address employeeId) payable public {
        require(msg.sender == owner);
        assert(employeeMap[employeeId].id != 0x0);
    
        _partialPaid(employeeMap[employeeId]);
        delete employeeMap[employeeId];
    }


    function changePaymentAddress(address oriAddress, address newAddress) public onlyOwner employeeExist(oriAddress) {
        Employee oriEmployee = employeeMap[oriAddress];
        employeeMap[newAddress] = Employee(newAddress, oriEmployee.salary, oriEmployee.lastPayday);
        delete employeeMap[oriAddress];
    }
    
    function updateEmployee(address employeeAddress, uint salary) public onlyOwner{
        Employee employee = employeeMap[employeeAddress];
        assert(employee.id != 0x0);
        _partialPaid(employee);
        totalSalary -= employee.salary;
        totalSalary += salary;
        employee.salary    = salary * 1 ether;
        employee.lastPayday= now;
    }

    function addFund() payable public returns (uint) {
        return address(this).balance;
    }

    function calculateRunway() public view returns (uint) {
        return this.balance / totalSalary;
    }

    function hasEnoughFund() public view returns (bool) {
        return calculateRunway() > 0;
    }

    function getPaid() public {
        Employee employee = employeeMap[msg.sender];
        uint nextPayday = employee.lastPayday.add(payDuration);
        assert(nextPayday < now);

        employee.lastPayday = nextPayday;
        employee.id.transfer(employee.salary);
    }
    
    function getBanlance() public view returns (uint) {
        return this.balance;
    }
}
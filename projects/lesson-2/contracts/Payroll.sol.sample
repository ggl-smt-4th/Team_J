pragma solidity ^0.4.14;
contract paoyroll{
    uint constant payDuration = 30 days	;
    
    struct Employee{
        address id ;
        uint salary;
        uint lastPayday; 
    }
    uint totasalary=0;
    
    address owner;
    Employee[] employees;
    function parroll(){
        owner = msg.sender;
    }
    function _paytialpaid(Employee employee) private{
        uint payment = employee.salary * (now - employee.lastPayday) / payDuration;
        employee.id.transfer(payment);
    }
    function _findEmployee(address employeeId) private returns (Employee,uint){
        for(uint i=0; i<employees.length; i++)
        {
            if(employees[i].id ==employeeId )
            {
                return (employees[i],i);
            }
        }
    }
    
    function addEmployee(address employeeId ,uint salary ){
        require(msg.sender == owner);
        
        var (employee,index)=_findEmployee(employeeId);
        assert(employee.id == 0x0);
        employees.push(Employee(employeeId,salary,now));
    }
    
    function removeEmployee(address employeeId){
        var (employee,index)=_findEmployee(employeeId);
        assert(employee.id == 0x0);
        
        _paytialpaid(employee);
        delete employees[index];
        employees[index]=employees[employees.length - 1];
        employees.length -=1;
    }
    function updateEmployee(address employeeId,uint salary)
    {
        require(msg.sender == owner);
        
        var (employee,index)=_findEmployee(employeeId);
        assert(employee.id == 0x0);
        
         _paytialpaid(employee); 
        employees[index].salary=salary * 1 ether;
        employees[index].lastPayday=now;
       
    }
    function addfund() payable returns(uint) {
        return this.balance;
    }
    
    function calculateRunway() returns (uint){
        
        for(uint i=0; i<employees.length; i++)
        {
            totasalary += employees[i].salary ;
        }
        
        return this.balance/totasalary;
    }
    
    function hasEnoughFund() returns (bool)
    {
        return calculateRunway() > 0;
    }
    
    function getpaid(){
        var (employee,index)=_findEmployee(msg.sender);
        assert(employee.id == 0x0);
        
        uint nextPayday= employee.lastPayday + payDuration;
        assert(nextPayday < now);
        
        employees[index].lastPayday=nextPayday;
        employees[index].id.transfer(employee.salary); 
    }
 }
